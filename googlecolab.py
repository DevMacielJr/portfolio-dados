# -*- coding: utf-8 -*-
"""20210010250ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UWbdM7t2Ebzv6_a15w8eEdYb78pKtqVG

# ***Edson Maciel de Barros Junior - 20210010250***

# EDSON MACIEL DE BARROS JUNIOR - 20210010250
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as snsa

pwd

import os

pd.read_csv('/content/heart.csv')

heart_disease_data=pd.read_csv('heart.csv')

heart_disease_data.head(10)

heart_disease_data.describe()

heart_disease_data.info()

heart_disease_data['target'].value_counts()

heart_disease_data.columns

heart_disease_data.head(5)

X=heart_disease_data.loc[:,heart_disease_data.columns!='target']
X

y=heart_disease_data.loc[:,"target"]
y

X_encoded=pd.get_dummies(heart_disease_data,columns=['sex', 'cp','fbs','restecg','exang','slope','ca','thal'])
X_encoded.head()

#splitting thr dataset
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state = 1)

from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.transform(X_test)

from sklearn.svm import SVC
svc = SVC(kernel = 'linear', random_state = 0)
svc.fit(X_train,y_train )

#Predict  the test data
y_pred_svc = svc.predict(X_test)

#checking the performance of the model
y_pred_svc_df = pd.DataFrame({'Expected':y_test, 'Predicted':y_pred_svc })
y_pred_svc_df.head(10)

y_pred_svc_df.shape

from sklearn.metrics import confusion_matrix, accuracy_score

svc_cm = confusion_matrix(y_test, y_pred_svc)
svc_cm

svc_acc = accuracy_score(y_test, y_pred_svc)
svc_acc

"""# Gr√°ficos - Parte 2 do Trabalho

"""

import numpy as np

# Configura√ß√£o para gr√°ficos mais bonitos
sns.set(style='whitegrid')

# Carregando o dataset
df = pd.read_csv('/content/heart.csv')
df.head()

# Mostrar a dimens√£o do dataset
print(f"Shape do DataFrame: {df.shape}\n")

# Informa√ß√µes gerais do DataFrame
print("Informa√ß√µes gerais (df.info()):")
df.info()
print("\n")

# Estat√≠sticas descritivas das colunas num√©ricas
print("Estat√≠sticas descritivas (df.describe()):")
display(df.describe())
print("\n")

# Checar valores nulos em cada coluna
print("Quantidade de valores nulos por coluna:")
null_counts = df.isnull().sum()
print(null_counts)

# Se quiser, mostrar um resumo caso tenha valores nulos
if null_counts.sum() > 0:
    print("\nAten√ß√£o: existem valores nulos no dataset.")
else:
    print("\nNenhum valor nulo encontrado no dataset.")

# Contagem de casos com e sem doen√ßa card√≠aca
plt.figure(figsize=(8, 5))
sns.countplot(data=df, x='target', color=sns.color_palette('Set2')[0], edgecolor='black')

plt.title('Distribui√ß√£o da Vari√°vel Alvo (Doen√ßa Card√≠aca)', fontsize=14)
plt.xlabel('Diagn√≥stico', fontsize=12)
plt.ylabel('Quantidade de Pacientes', fontsize=12)
plt.xticks([0, 1], ['Sem Doen√ßa', 'Com Doen√ßa'], fontsize=11)

# R√≥tulos nas barras
for container in plt.gca().containers:
    plt.bar_label(container, fmt='%d', label_type='edge', fontsize=10)

plt.tight_layout()
plt.show()

# Porcentagens de cada classe da vari√°vel alvo
percentuais = df['target'].value_counts(normalize=True) * 100
print("Porcentagem de Pacientes com e sem Doen√ßa Card√≠aca:")
for i, valor in percentuais.items():
    status = 'Com Doen√ßa' if i == 1 else 'Sem Doen√ßa'
    print(f"  {status}: {valor:.2f}%")

# Histograma de idade
plt.figure(figsize=(10, 6))
sns.histplot(data=df, x='age', bins=20, kde=True, color='skyblue', edgecolor='black')
plt.title('Distribui√ß√£o da Idade', fontsize=14)
plt.xlabel('Idade', fontsize=12)
plt.ylabel('Frequ√™ncia', fontsize=12)
plt.xlim(df['age'].min(), df['age'].max())
plt.tight_layout()
plt.show()

print("\n")  # Linha em branco para separar

# Idade vs Colesterol colorido pela presen√ßa de doen√ßa
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='age', y='chol', hue='target', palette='Set1', edgecolor='black')
plt.title('Idade vs Colesterol com Presen√ßa de Doen√ßa Card√≠aca', fontsize=14)
plt.xlabel('Idade', fontsize=12)
plt.ylabel('Colesterol', fontsize=12)
plt.xlim(df['age'].min(), df['age'].max())
plt.legend(title='Doen√ßa Card√≠aca', labels=['Sem Doen√ßa', 'Com Doen√ßa'])
plt.tight_layout()
plt.show()

# Doen√ßa card√≠aca por sexo

plt.figure(figsize=(10, 6))
sns.countplot(
    data=df,
    x='sex',
    hue='target',
    palette='Set2',
    edgecolor='black'
)

plt.title('Distribui√ß√£o de Doen√ßa Card√≠aca por Sexo', fontsize=14)
plt.xlabel('Sexo', fontsize=12)
plt.ylabel('Contagem', fontsize=12)
plt.xticks([0, 1], ['Mulher', 'Homem'], fontsize=11)
plt.legend(title='Doen√ßa Card√≠aca', labels=['Sem Doen√ßa', 'Com Doen√ßa'], fontsize=11, title_fontsize=12)

# R√≥tulos nas barras
for container in plt.gca().containers:
    plt.bar_label(container, fmt='%d', label_type='edge', fontsize=10)

plt.tight_layout()
plt.show()

print("\n")  # Linha em branco para separar

# Tipo de dor no peito vs presen√ßa de doen√ßa card√≠aca
plt.figure(figsize=(10, 6))
sns.countplot(data=df, x='cp', hue='target', palette='Set1', edgecolor='black')
plt.title('Tipo de Dor no Peito vs Doen√ßa Card√≠aca', fontsize=14)
plt.xlabel('Tipo de Dor no Peito (cp)', fontsize=12)
plt.ylabel('Contagem', fontsize=12)
plt.legend(title='Doen√ßa Card√≠aca', labels=['Sem Doen√ßa', 'Com Doen√ßa'], fontsize=11, title_fontsize=12)
for container in plt.gca().containers:
    plt.bar_label(container, fmt='%d', fontsize=10)
plt.tight_layout()
plt.show()

# Idade vs Presen√ßa de Doen√ßa Card√≠aca (boxplot)
plt.figure(figsize=(10, 6))
sns.boxplot(data=df, x='target', y='age', hue='target', palette={0:'#5DADE2', 1:'#E74C3C'}, dodge=False, legend=False)
plt.title('Idade vs Presen√ßa de Doen√ßa Card√≠aca', fontsize=16,)
plt.xlabel('Doen√ßa Card√≠aca', fontsize=14)
plt.ylabel('Idade (anos)', fontsize=14)

plt.xticks([0, 1], ['Sem Doen√ßa', 'Com Doen√ßa'], fontsize=12)
plt.yticks(fontsize=12)

# Adiciona valores m√©dios como pontos sobre o boxplot
mean_age = df.groupby('target')['age'].mean()
for i, mean in enumerate(mean_age):
    plt.text(i, mean + 0.5, f'{mean:.1f}', horizontalalignment='center', color='black', weight='semibold')

plt.tight_layout()
plt.show()


print("\n")  # Linha em branco para separar

# Tipo de dor no peito vs presen√ßa de doen√ßa card√≠aca
plt.figure(figsize=(10, 6))
sns.countplot(data=df, x='cp', hue='target', palette='Set2', edgecolor='black')

plt.title('Tipo de Dor no Peito vs Presen√ßa de Doen√ßa Card√≠aca', fontsize=16)
plt.xlabel('Tipo de Dor no Peito (cp)', fontsize=14)
plt.ylabel('Contagem de Pacientes', fontsize=14)
plt.xticks(ticks=range(4), labels=[
    'Tipo 0: Dor t√≠pica anginosa',
    'Tipo 1: Dor at√≠pica anginosa',
    'Tipo 2: Dor n√£o-anginosa',
    'Tipo 3: Assintom√°tico'
], rotation=25, fontsize=12)

plt.legend(title='Doen√ßa Card√≠aca', labels=['Sem Doen√ßa', 'Com Doen√ßa'], fontsize=12, title_fontsize=13, loc='upper right')

# Adiciona r√≥tulos de contagem em cada barra
for container in plt.gca().containers:
    plt.bar_label(container, fmt='%d', label_type='edge', fontsize=11)

plt.tight_layout()
plt.show()

# Mapa de Correla√ß√£o
plt.figure(figsize=(15, 10))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', fmt='.2f', linewidths=.5)
plt.title('Mapa de Correla√ß√£o entre Vari√°veis', fontsize=16)
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

# Dados da imagem
insights = [
    "Idade",
    "Sexo",
    "Tipo de dor no peito (cp)",
    "Frequ√™ncia card√≠aca (thalach)",
    "oldpeak e restecg",
    "fbs",
    "Modelos de ML"
]

impactos = [
    "Alta",       # Idade
    "Alta",       # Sexo
    "Alta",       # Tipo de dor no peito
    "Alta",       # Frequ√™ncia card√≠aca
    "M√©dia",      # oldpeak e restecg
    "Baixa",      # fbs
    "Alta"        # Modelos de ML
]

# Convertendo impacto em valores num√©ricos para plotagem
impacto_numerico = [3 if i == "Alta" else 2 if i == "M√©dia" else 1 for i in impactos]

# Cores para os n√≠veis de impacto
cores = ['green' if i == 3 else 'orange' if i == 2 else 'red' for i in impacto_numerico]

# Criar gr√°fico de barras
plt.figure(figsize=(10, 6))
plt.barh(insights, impacto_numerico, color=cores)
plt.xlabel("N√≠vel de Influ√™ncia")
plt.title("N√≠vel de Influ√™ncia dos Insights no Modelo")
plt.yticks(rotation=0)
plt.xticks([1, 2, 3], ["Baixa", "M√©dia", "Alta"])
plt.gca().invert_yaxis()  # Colocar o mais relevante no topo
plt.grid(axis='x', linestyle='--', alpha=0.7)

plt.tight_layout()
plt.show()

"""DASHBOARD"""

!pip install streamlit
!pip install pyngrok
!pip install plotly seaborn scikit-learn

code = """
import streamlit as st
import pandas as pd
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix, accuracy_score

# Configura√ß√£o
st.set_page_config(page_title="Dashboard - Doen√ßa Card√≠aca", layout="wide")

@st.cache_data
def load_data():
    df = pd.read_csv("heart.csv")
    return df

df = load_data()
st.title("üìä Dashboard Interativo - An√°lise de Doen√ßa Card√≠aca")

# 1. Distribui√ß√£o da vari√°vel alvo
st.subheader("Distribui√ß√£o da Vari√°vel Alvo (Doen√ßa Card√≠aca)")
fig1 = px.histogram(df, x='target', color='target',
                    labels={'target': 'Doen√ßa Card√≠aca'},
                    category_orders={'target': [0, 1]},
                    color_discrete_sequence=['#66c2a5', '#fc8d62'])
st.plotly_chart(fig1, use_container_width=True)

# 2. Gr√°fico de dispers√£o: Idade vs Colesterol
st.subheader("Dispers√£o: Idade vs Colesterol")
fig2 = px.scatter(df, x='age', y='chol', color='target',
                  title="Rela√ß√£o entre Idade e Colesterol",
                  labels={'chol': 'Colesterol', 'age': 'Idade'})
st.plotly_chart(fig2, use_container_width=True)

# 3. Mapa de Calor - Correla√ß√£o
st.subheader("Mapa de Calor da Correla√ß√£o")
fig3, ax = plt.subplots(figsize=(10, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', fmt=".2f", ax=ax)
st.pyplot(fig3)

# 4. Gr√°fico interativo: Seletor de coluna
st.subheader("Explora√ß√£o de Vari√°veis Categ√≥ricas")
col = st.selectbox("Selecione uma coluna:", df.select_dtypes(include='int64').columns)
fig4 = px.histogram(df, x=col, color='target', barmode='group',
                    title=f'Distribui√ß√£o por {col}', labels={'target': 'Doen√ßa Card√≠aca'})
st.plotly_chart(fig4, use_container_width=True)

# 5. Classificador SVM - Acur√°cia
st.subheader("üéØ Desempenho do Modelo SVM")
X = pd.get_dummies(df.drop('target', axis=1), columns=['sex', 'cp', 'fbs', 'restecg', 'exang', 'slope', 'ca', 'thal'])
y = df['target']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

model = SVC(kernel='linear', random_state=0)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

acc = accuracy_score(y_test, y_pred)
cm = confusion_matrix(y_test, y_pred)

st.write(f"**Acur√°cia do Modelo SVM:** {acc:.2%}")
st.write("**Matriz de Confus√£o:**")
st.dataframe(pd.DataFrame(cm, index=["Sem Doen√ßa", "Com Doen√ßa"], columns=["Predito: Sem", "Predito: Com"]))
"""

with open("app.py", "w") as f:
    f.write(code)

from pyngrok import ngrok

# Executa Streamlit
!streamlit run app.py &

# Abre t√∫nel ngrok para porta 8501 (porta default do Streamlit)
public_url = ngrok.connect(port='8501')
print(f"Link para acessar o app: {public_url}")